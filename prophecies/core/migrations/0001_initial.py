# Generated by Django 3.2.6 on 2021-08-07 10:57

import colorfield.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('database', '0002_auto_20190129_2304'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChoiceGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Project name')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=100)),
                ('rounds', models.PositiveIntegerField(default=3, verbose_name='Number of rounds')),
                ('automatic_round_attributions', models.BooleanField(default=True, verbose_name='Attribute rounds (if not checked, all checkers will participate in all rounds)')),
                ('allow_multiple_checks', models.BooleanField(default=True, verbose_name='Allow checkers to check several time the same item')),
                ('priority', models.PositiveIntegerField(default=1, verbose_name='Priority')),
                ('allow_items_addition', models.BooleanField(default=False, verbose_name='Allow checker to add items')),
                ('color', colorfield.fields.ColorField(default='#31807D', max_length=18)),
                ('recordLinkTemplate', models.CharField(blank=True, help_text='A link template to build a link for each task record. Task record can override this value with their own link', max_length=1000, null=True, verbose_name='Record link template')),
            ],
        ),
        migrations.CreateModel(
            name='TaskRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, help_text='An optional unique identifier used to update task records in bulk', max_length=50, null=True, verbose_name='UID')),
                ('original_value', models.TextField(blank=True, help_text='Original value of the record', null=True)),
                ('predicted_value', models.TextField(blank=True, help_text='Suggested value to be reviewed', null=True)),
                ('metadata', models.JSONField(blank=True, help_text='Optional metadata for this record (in JSON)', null=True)),
                ('status', models.CharField(blank=True, choices=[('PENDING', 'Pending'), ('ASSIGNED', 'Assigned'), ('DONE', 'Done')], default='PENDING', help_text="Status of the record. Set to done after it passes all task's rounds", max_length=8)),
                ('rounds', models.PositiveIntegerField(default=0, help_text='Number of rounds this record was submitted to')),
                ('link', models.CharField(blank=True, help_text='An optional link to the record', max_length=1000, null=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_records', to='core.task')),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('database.constance',),
        ),
        migrations.CreateModel(
            name='TaskChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.task')),
            ],
            options={
                'unique_together': {('checker', 'task')},
            },
        ),
        migrations.AddField(
            model_name='task',
            name='checkers',
            field=models.ManyToManyField(related_name='task', through='core.TaskChecker', to=settings.AUTH_USER_MODEL, verbose_name="User in charge of checking this task's data"),
        ),
        migrations.AddField(
            model_name='task',
            name='choice_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.choicegroup', verbose_name='Choices'),
        ),
        migrations.AddField(
            model_name='task',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='task',
            name='project',
            field=models.ForeignKey(help_text='Project this task belong to', on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='core.project'),
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('value', models.CharField(blank=True, max_length=100)),
                ('shortkeys', models.CharField(blank=True, help_text='Commat separated list of shortkeys to pick this choice', max_length=100, null=True)),
                ('require_alternative_value', models.BooleanField(default=False, verbose_name='Requires an alternative value?')),
                ('choice_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='core.choicegroup')),
            ],
        ),
        migrations.CreateModel(
            name='AlternativeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('value', models.CharField(blank=True, max_length=100)),
                ('choice_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alternative_values', to='core.choicegroup')),
            ],
        ),
        migrations.CreateModel(
            name='TaskRecordReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round', models.PositiveIntegerField(default=None, null=True, verbose_name='Attribution round')),
                ('status', models.CharField(blank=True, choices=[('PENDING', 'Pending'), ('DONE', 'Done')], default='PENDING', max_length=7)),
                ('note', models.CharField(blank=True, max_length=100, null=True, verbose_name='Checker note')),
                ('alternative_value', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('checker', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviews', to=settings.AUTH_USER_MODEL)),
                ('choice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.choice')),
                ('task_record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviews', to='core.taskrecord')),
            ],
            options={
                'get_latest_by': 'round',
                'unique_together': {('task_record_id', 'checker_id')},
            },
        ),
    ]
